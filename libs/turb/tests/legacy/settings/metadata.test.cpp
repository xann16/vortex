// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
#include <nlohmann/json.hpp>

#include "turb/legacy/settings/metadata.hpp"

TEST_CASE( "Metadata - Sample Test", "[sample]" )
{
    vortex::turb::legacy::settings::Metadata( nullptr );

    REQUIRE( true );
}

// "sim_method" property

TEST_CASE( "Metadata - property: \"sim_method\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "sim_method", "fdns" } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.sim_method();
    auto default_value = s_null.sim_method();

    REQUIRE( value == vortex::turb::legacy::settings::SimMethod::Fdns );
    REQUIRE( default_value == vortex::turb::legacy::settings::SimMethod::Dns );
}

// "particle_mode" property

TEST_CASE( "Metadata - property: \"particle_mode\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "particle_mode", "twc" } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.particle_mode();
    auto default_value = s_null.particle_mode();

    REQUIRE( value == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( default_value == vortex::turb::legacy::settings::ParticleMode::None );
}

// "gravity_type" property

TEST_CASE( "Metadata - property: \"gravity_type\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "gravity_type", "horizontal" } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.gravity_type();
    auto default_value = s_null.gravity_type();

    REQUIRE( value == vortex::turb::legacy::settings::GravityMode::Horizontal );
    REQUIRE( default_value == vortex::turb::legacy::settings::GravityMode::None );
}

// "particle_kernel_type" property

TEST_CASE( "Metadata - property: \"particle_kernel_type\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "particle_kernel_type", "pic" } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.particle_kernel_type();
    auto default_value = s_null.particle_kernel_type();

    REQUIRE( value == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( default_value == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
}

// "k_filter" property

TEST_CASE( "Metadata - property: \"k_filter\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "k_filter", -2l } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.k_filter();
    auto default_value = s_null.k_filter();

    REQUIRE( static_cast< vortex::i32 >( value ) == -2l );
    REQUIRE( static_cast< vortex::i32 >( default_value ) == vortex::i32{} );
}

// "C_K" property

TEST_CASE( "Metadata - property: \"C_K\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "C_K", 0.3 } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.C_K();
    auto default_value = s_null.C_K();

    REQUIRE_THAT( static_cast< vortex::real >( value ), Catch::Matchers::WithinAbs( 0.3, 1e-05 ) );
    REQUIRE_THAT( static_cast< vortex::real >( default_value ), Catch::Matchers::WithinAbs( 2.5, 1e-05 ) );
}

// "target_Phi" property

TEST_CASE( "Metadata - property: \"target_Phi\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "target_Phi", 0.3 } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.target_Phi();
    auto default_value = s_null.target_Phi();

    REQUIRE_THAT( static_cast< vortex::real >( value ), Catch::Matchers::WithinAbs( 0.3, 1e-05 ) );
    REQUIRE_THAT( static_cast< vortex::real >( default_value ), Catch::Matchers::WithinAbs( vortex::real{}, 1e-05 ) );
}

// "superpart_factor" property

TEST_CASE( "Metadata - property: \"superpart_factor\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "superpart_factor", 0.3 } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.superpart_factor();
    auto default_value = s_null.superpart_factor();

    REQUIRE_THAT( static_cast< vortex::real >( value ), Catch::Matchers::WithinAbs( 0.3, 1e-05 ) );
    REQUIRE_THAT( static_cast< vortex::real >( default_value ), Catch::Matchers::WithinAbs( 1, 1e-05 ) );
}

// "src_flow_path" property

TEST_CASE( "Metadata - property: \"src_flow_path\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "src_flow_path", "ptest" } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.src_flow_path();
    auto default_value = s_null.src_flow_path();

    REQUIRE( value == "ptest" );
    REQUIRE( default_value == std::string_view{} );
}

// "src_part_path" property

TEST_CASE( "Metadata - property: \"src_part_path\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "src_part_path", "ptest" } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.src_part_path();
    auto default_value = s_null.src_part_path();

    REQUIRE( value == "ptest" );
    REQUIRE( default_value == std::string_view{} );
}

// "part_output_delay" property

TEST_CASE( "Metadata - property: \"part_output_delay\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "part_output_delay", -2l } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.part_output_delay();
    auto default_value = s_null.part_output_delay();

    REQUIRE( static_cast< vortex::i32 >( value ) == -2l );
    REQUIRE( static_cast< vortex::i32 >( default_value ) == vortex::i32{} );
}

// "is_perf_full_profile_enabled" property

TEST_CASE( "Metadata - property: \"is_perf_full_profile_enabled\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "is_perf_full_profile_enabled", true } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.is_perf_full_profile_enabled();
    auto default_value = s_null.is_perf_full_profile_enabled();

    REQUIRE( value == true );
    REQUIRE( default_value == bool{} );
}

// "is_perf_simple_enabled" property

TEST_CASE( "Metadata - property: \"is_perf_simple_enabled\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "is_perf_simple_enabled", true } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.is_perf_simple_enabled();
    auto default_value = s_null.is_perf_simple_enabled();

    REQUIRE( value == true );
    REQUIRE( default_value == bool{} );
}

// "is_perf_part_dist_enabled" property

TEST_CASE( "Metadata - property: \"is_perf_part_dist_enabled\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "is_perf_part_dist_enabled", true } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.is_perf_part_dist_enabled();
    auto default_value = s_null.is_perf_part_dist_enabled();

    REQUIRE( value == true );
    REQUIRE( default_value == bool{} );
}

// "perf_full_start" property

TEST_CASE( "Metadata - property: \"perf_full_start\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "perf_full_start", -2l } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.perf_full_start();
    auto default_value = s_null.perf_full_start();

    REQUIRE( static_cast< vortex::i32 >( value ) == -2l );
    REQUIRE( static_cast< vortex::i32 >( default_value ) == vortex::i32{} );
}

// "perf_full_end" property

TEST_CASE( "Metadata - property: \"perf_full_end\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "perf_full_end", -2l } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.perf_full_end();
    auto default_value = s_null.perf_full_end();

    REQUIRE( static_cast< vortex::i32 >( value ) == -2l );
    REQUIRE( static_cast< vortex::i32 >( default_value ) == vortex::i32{} );
}

// "part_perf_interval" property

TEST_CASE( "Metadata - property: \"part_perf_interval\" - getter", "[settings]" )
{
    auto obj = nlohmann::json{ { "part_perf_interval", -2l } };
    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{ nullptr };

    auto value = s.part_perf_interval();
    auto default_value = s_null.part_perf_interval();

    REQUIRE( static_cast< vortex::i32 >( value ) == -2l );
    REQUIRE( static_cast< vortex::i32 >( default_value ) == vortex::i32{} );
}


