// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <cstring>
#include <string>
#include <catch2/catch_test_macros.hpp>
#include <nlohmann/json.hpp>
#include "turb/legacy/settings/enums/forcing_type.hpp"
#include "turb/legacy/settings/enums/forcing_type_json_integration.hpp"

TEST_CASE( "ForcingType - conversion between enums and strings", "[sample]" )
{
    using namespace std::string_literals;

    // Testing conversions for ForcingType::Deterministic
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ForcingType::Deterministic ) == "deterministic"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ForcingType::Deterministic ), "deterministic" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( "deterministic" ) == vortex::turb::legacy::settings::ForcingType::Deterministic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( "deterministic"s ) == vortex::turb::legacy::settings::ForcingType::Deterministic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ForcingType::Deterministic ) ) == vortex::turb::legacy::settings::ForcingType::Deterministic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ForcingType::Deterministic ) ) == vortex::turb::legacy::settings::ForcingType::Deterministic );

    // Testing conversions for ForcingType::Stochastic
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ForcingType::Stochastic ) == "stochastic"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ForcingType::Stochastic ), "stochastic" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( "stochastic" ) == vortex::turb::legacy::settings::ForcingType::Stochastic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( "stochastic"s ) == vortex::turb::legacy::settings::ForcingType::Stochastic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ForcingType::Stochastic ) ) == vortex::turb::legacy::settings::ForcingType::Stochastic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ForcingType::Stochastic ) ) == vortex::turb::legacy::settings::ForcingType::Stochastic );

    // Testing conversions for values out of range
    REQUIRE( vortex::turb::legacy::settings::to_string( static_cast< vortex::turb::legacy::settings::ForcingType >( 2 ) ) == "unknown"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( static_cast< vortex::turb::legacy::settings::ForcingType >( 2 ) ), "unknown" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( "" ) == vortex::turb::legacy::settings::ForcingType::Deterministic );
    REQUIRE( vortex::turb::legacy::settings::to_forcing_type( ""s ) == vortex::turb::legacy::settings::ForcingType::Deterministic );
}


TEST_CASE( "ForcingType - integration with json serialization", "[sample]" )
{
    nlohmann::json deterministic_json_from_enum = vortex::turb::legacy::settings::ForcingType::Deterministic;
    nlohmann::json deterministic_json_from_str = "deterministic";
    nlohmann::json stochastic_json_from_enum = vortex::turb::legacy::settings::ForcingType::Stochastic;
    nlohmann::json stochastic_json_from_str = "stochastic";
    nlohmann::json invalid_json_from_str = "unknown";

    REQUIRE( deterministic_json_from_enum == "deterministic" );
    REQUIRE( deterministic_json_from_str == "deterministic" );
    REQUIRE( stochastic_json_from_enum == "stochastic" );
    REQUIRE( stochastic_json_from_str == "stochastic" );
    REQUIRE( invalid_json_from_str == "unknown" );

    REQUIRE( deterministic_json_from_enum.template get< vortex::turb::legacy::settings::ForcingType >() == vortex::turb::legacy::settings::ForcingType::Deterministic );
    REQUIRE( deterministic_json_from_str.template get< vortex::turb::legacy::settings::ForcingType >() == vortex::turb::legacy::settings::ForcingType::Deterministic );
    REQUIRE( stochastic_json_from_enum.template get< vortex::turb::legacy::settings::ForcingType >() == vortex::turb::legacy::settings::ForcingType::Stochastic );
    REQUIRE( stochastic_json_from_str.template get< vortex::turb::legacy::settings::ForcingType >() == vortex::turb::legacy::settings::ForcingType::Stochastic );
    REQUIRE( invalid_json_from_str.template get< vortex::turb::legacy::settings::ForcingType >() == vortex::turb::legacy::settings::ForcingType::Deterministic );
}
