// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <cstring>
#include <string>
#include <catch2/catch_test_macros.hpp>
#include <nlohmann/json.hpp>
#include "turb/legacy/settings/enums/particle_mode.hpp"
#include "turb/legacy/settings/enums/particle_mode_json_integration.hpp"

TEST_CASE( "ParticleMode - conversion between enums and strings", "[sample]" )
{
    using namespace std::string_literals;

    // Testing conversions for ParticleMode::None
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleMode::None ) == "none"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleMode::None ), "none" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "none" ) == vortex::turb::legacy::settings::ParticleMode::None );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "none"s ) == vortex::turb::legacy::settings::ParticleMode::None );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleMode::None ) ) == vortex::turb::legacy::settings::ParticleMode::None );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleMode::None ) ) == vortex::turb::legacy::settings::ParticleMode::None );

    // Testing conversions for ParticleMode::Owc
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleMode::Owc ) == "owc"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleMode::Owc ), "owc" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "owc" ) == vortex::turb::legacy::settings::ParticleMode::Owc );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "owc"s ) == vortex::turb::legacy::settings::ParticleMode::Owc );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleMode::Owc ) ) == vortex::turb::legacy::settings::ParticleMode::Owc );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleMode::Owc ) ) == vortex::turb::legacy::settings::ParticleMode::Owc );

    // Testing conversions for ParticleMode::Twc
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleMode::Twc ) == "twc"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleMode::Twc ), "twc" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "twc" ) == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "twc"s ) == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleMode::Twc ) ) == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleMode::Twc ) ) == vortex::turb::legacy::settings::ParticleMode::Twc );

    // Testing conversions for values out of range
    REQUIRE( vortex::turb::legacy::settings::to_string( static_cast< vortex::turb::legacy::settings::ParticleMode >( 3 ) ) == "unknown"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( static_cast< vortex::turb::legacy::settings::ParticleMode >( 3 ) ), "unknown" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( "" ) == vortex::turb::legacy::settings::ParticleMode::None );
    REQUIRE( vortex::turb::legacy::settings::to_particle_mode( ""s ) == vortex::turb::legacy::settings::ParticleMode::None );
}


TEST_CASE( "ParticleMode - integration with json serialization", "[sample]" )
{
    nlohmann::json none_json_from_enum = vortex::turb::legacy::settings::ParticleMode::None;
    nlohmann::json none_json_from_str = "none";
    nlohmann::json owc_json_from_enum = vortex::turb::legacy::settings::ParticleMode::Owc;
    nlohmann::json owc_json_from_str = "owc";
    nlohmann::json twc_json_from_enum = vortex::turb::legacy::settings::ParticleMode::Twc;
    nlohmann::json twc_json_from_str = "twc";
    nlohmann::json invalid_json_from_str = "unknown";

    REQUIRE( none_json_from_enum == "none" );
    REQUIRE( none_json_from_str == "none" );
    REQUIRE( owc_json_from_enum == "owc" );
    REQUIRE( owc_json_from_str == "owc" );
    REQUIRE( twc_json_from_enum == "twc" );
    REQUIRE( twc_json_from_str == "twc" );
    REQUIRE( invalid_json_from_str == "unknown" );

    REQUIRE( none_json_from_enum.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::None );
    REQUIRE( none_json_from_str.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::None );
    REQUIRE( owc_json_from_enum.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::Owc );
    REQUIRE( owc_json_from_str.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::Owc );
    REQUIRE( twc_json_from_enum.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( twc_json_from_str.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( invalid_json_from_str.template get< vortex::turb::legacy::settings::ParticleMode >() == vortex::turb::legacy::settings::ParticleMode::None );
}
