// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <cstring>
#include <string>
#include <catch2/catch_test_macros.hpp>
#include <nlohmann/json.hpp>
#include "turb/legacy/settings/enums/drag_type.hpp"
#include "turb/legacy/settings/enums/drag_type_json_integration.hpp"

TEST_CASE( "DragType - conversion between enums and strings", "[sample]" )
{
    using namespace std::string_literals;

    // Testing conversions for DragType::Stokes
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::DragType::Stokes ) == "stokes"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::DragType::Stokes ), "stokes" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( "stokes" ) == vortex::turb::legacy::settings::DragType::Stokes );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( "stokes"s ) == vortex::turb::legacy::settings::DragType::Stokes );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::DragType::Stokes ) ) == vortex::turb::legacy::settings::DragType::Stokes );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::DragType::Stokes ) ) == vortex::turb::legacy::settings::DragType::Stokes );

    // Testing conversions for DragType::Nonlinear
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::DragType::Nonlinear ) == "nonlinear"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::DragType::Nonlinear ), "nonlinear" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( "nonlinear" ) == vortex::turb::legacy::settings::DragType::Nonlinear );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( "nonlinear"s ) == vortex::turb::legacy::settings::DragType::Nonlinear );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::DragType::Nonlinear ) ) == vortex::turb::legacy::settings::DragType::Nonlinear );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::DragType::Nonlinear ) ) == vortex::turb::legacy::settings::DragType::Nonlinear );

    // Testing conversions for values out of range
    REQUIRE( vortex::turb::legacy::settings::to_string( static_cast< vortex::turb::legacy::settings::DragType >( 2 ) ) == "unknown"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( static_cast< vortex::turb::legacy::settings::DragType >( 2 ) ), "unknown" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( "" ) == vortex::turb::legacy::settings::DragType::Stokes );
    REQUIRE( vortex::turb::legacy::settings::to_drag_type( ""s ) == vortex::turb::legacy::settings::DragType::Stokes );
}


TEST_CASE( "DragType - integration with json serialization", "[sample]" )
{
    nlohmann::json stokes_json_from_enum = vortex::turb::legacy::settings::DragType::Stokes;
    nlohmann::json stokes_json_from_str = "stokes";
    nlohmann::json nonlinear_json_from_enum = vortex::turb::legacy::settings::DragType::Nonlinear;
    nlohmann::json nonlinear_json_from_str = "nonlinear";
    nlohmann::json invalid_json_from_str = "unknown";

    REQUIRE( stokes_json_from_enum == "stokes" );
    REQUIRE( stokes_json_from_str == "stokes" );
    REQUIRE( nonlinear_json_from_enum == "nonlinear" );
    REQUIRE( nonlinear_json_from_str == "nonlinear" );
    REQUIRE( invalid_json_from_str == "unknown" );

    REQUIRE( stokes_json_from_enum.template get< vortex::turb::legacy::settings::DragType >() == vortex::turb::legacy::settings::DragType::Stokes );
    REQUIRE( stokes_json_from_str.template get< vortex::turb::legacy::settings::DragType >() == vortex::turb::legacy::settings::DragType::Stokes );
    REQUIRE( nonlinear_json_from_enum.template get< vortex::turb::legacy::settings::DragType >() == vortex::turb::legacy::settings::DragType::Nonlinear );
    REQUIRE( nonlinear_json_from_str.template get< vortex::turb::legacy::settings::DragType >() == vortex::turb::legacy::settings::DragType::Nonlinear );
    REQUIRE( invalid_json_from_str.template get< vortex::turb::legacy::settings::DragType >() == vortex::turb::legacy::settings::DragType::Stokes );
}
