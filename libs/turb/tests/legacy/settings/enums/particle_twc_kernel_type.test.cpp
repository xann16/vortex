// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <cstring>
#include <string>
#include <catch2/catch_test_macros.hpp>
#include <nlohmann/json.hpp>
#include "turb/legacy/settings/enums/particle_twc_kernel_type.hpp"
#include "turb/legacy/settings/enums/particle_twc_kernel_type_json_integration.hpp"

TEST_CASE( "ParticleTwcKernelType - conversion between enums and strings", "[sample]" )
{
    using namespace std::string_literals;

    // Testing conversions for ParticleTwcKernelType::Pnn
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn ) == "pnn"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn ), "pnn" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( "pnn" ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( "pnn"s ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn ) ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn ) ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );

    // Testing conversions for ParticleTwcKernelType::Pic
    REQUIRE( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleTwcKernelType::Pic ) == "pic"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleTwcKernelType::Pic ), "pic" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( "pic" ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( "pic"s ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( vortex::turb::legacy::settings::to_string( vortex::turb::legacy::settings::ParticleTwcKernelType::Pic ) ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( vortex::turb::legacy::settings::to_c_str( vortex::turb::legacy::settings::ParticleTwcKernelType::Pic ) ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );

    // Testing conversions for values out of range
    REQUIRE( vortex::turb::legacy::settings::to_string( static_cast< vortex::turb::legacy::settings::ParticleTwcKernelType >( 2 ) ) == "unknown"s );
    REQUIRE( std::strcmp( vortex::turb::legacy::settings::to_c_str( static_cast< vortex::turb::legacy::settings::ParticleTwcKernelType >( 2 ) ), "unknown" ) == 0 );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( "" ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
    REQUIRE( vortex::turb::legacy::settings::to_particle_twc_kernel_type( ""s ) == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
}


TEST_CASE( "ParticleTwcKernelType - integration with json serialization", "[sample]" )
{
    nlohmann::json pnn_json_from_enum = vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn;
    nlohmann::json pnn_json_from_str = "pnn";
    nlohmann::json pic_json_from_enum = vortex::turb::legacy::settings::ParticleTwcKernelType::Pic;
    nlohmann::json pic_json_from_str = "pic";
    nlohmann::json invalid_json_from_str = "unknown";

    REQUIRE( pnn_json_from_enum == "pnn" );
    REQUIRE( pnn_json_from_str == "pnn" );
    REQUIRE( pic_json_from_enum == "pic" );
    REQUIRE( pic_json_from_str == "pic" );
    REQUIRE( invalid_json_from_str == "unknown" );

    REQUIRE( pnn_json_from_enum.template get< vortex::turb::legacy::settings::ParticleTwcKernelType >() == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
    REQUIRE( pnn_json_from_str.template get< vortex::turb::legacy::settings::ParticleTwcKernelType >() == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
    REQUIRE( pic_json_from_enum.template get< vortex::turb::legacy::settings::ParticleTwcKernelType >() == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( pic_json_from_str.template get< vortex::turb::legacy::settings::ParticleTwcKernelType >() == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( invalid_json_from_str.template get< vortex::turb::legacy::settings::ParticleTwcKernelType >() == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
}
