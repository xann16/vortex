// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

#include <nlohmann/json.hpp>
#include "turb/legacy/settings/stat/metadata_conversion.hpp"

TEST_CASE( "Metadata - property: \"sim_method\" - static", "[settings]" )
{
    nlohmann::json obj = { { "sim_method", "fdns" } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.sim_method();
    auto default_value = s_null.sim_method();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.sim_method();
    auto default_svalue = ss_null.sim_method();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == vortex::turb::legacy::settings::SimMethod::Fdns );
    REQUIRE( default_svalue == vortex::turb::legacy::settings::SimMethod::Dns );
}

TEST_CASE( "Metadata - property: \"particle_mode\" - static", "[settings]" )
{
    nlohmann::json obj = { { "particle_mode", "twc" } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.particle_mode();
    auto default_value = s_null.particle_mode();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.particle_mode();
    auto default_svalue = ss_null.particle_mode();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == vortex::turb::legacy::settings::ParticleMode::Twc );
    REQUIRE( default_svalue == vortex::turb::legacy::settings::ParticleMode::None );
}

TEST_CASE( "Metadata - property: \"gravity_type\" - static", "[settings]" )
{
    nlohmann::json obj = { { "gravity_type", "horizontal" } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.gravity_type();
    auto default_value = s_null.gravity_type();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.gravity_type();
    auto default_svalue = ss_null.gravity_type();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == vortex::turb::legacy::settings::GravityMode::Horizontal );
    REQUIRE( default_svalue == vortex::turb::legacy::settings::GravityMode::None );
}

TEST_CASE( "Metadata - property: \"particle_kernel_type\" - static", "[settings]" )
{
    nlohmann::json obj = { { "particle_kernel_type", "pic" } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.particle_kernel_type();
    auto default_value = s_null.particle_kernel_type();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.particle_kernel_type();
    auto default_svalue = ss_null.particle_kernel_type();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == vortex::turb::legacy::settings::ParticleTwcKernelType::Pic );
    REQUIRE( default_svalue == vortex::turb::legacy::settings::ParticleTwcKernelType::Pnn );
}

TEST_CASE( "Metadata - property: \"k_filter\" - static", "[settings]" )
{
    nlohmann::json obj = { { "k_filter", 8l } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.k_filter();
    auto default_value = s_null.k_filter();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.k_filter();
    auto default_svalue = ss_null.k_filter();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( static_cast< vortex::i32 >( svalue ) == 8l );
    REQUIRE( static_cast< vortex::i32 >( default_svalue ) == vortex::i32{} );
}

TEST_CASE( "Metadata - property: \"C_K\" - static", "[settings]" )
{
    nlohmann::json obj = { { "C_K", 8.3 } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.C_K();
    auto default_value = s_null.C_K();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.C_K();
    auto default_svalue = ss_null.C_K();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE_THAT( static_cast< vortex::real >( svalue ), Catch::Matchers::WithinAbs( 8.3, 1e-05 ) );
    REQUIRE_THAT( static_cast< vortex::real >( default_svalue ), Catch::Matchers::WithinAbs( 2.5, 1e-05 ) );
}

TEST_CASE( "Metadata - property: \"target_Phi\" - static", "[settings]" )
{
    nlohmann::json obj = { { "target_Phi", 8.3 } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.target_Phi();
    auto default_value = s_null.target_Phi();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.target_Phi();
    auto default_svalue = ss_null.target_Phi();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE_THAT( static_cast< vortex::real >( svalue ), Catch::Matchers::WithinAbs( 8.3, 1e-05 ) );
    REQUIRE_THAT( static_cast< vortex::real >( default_svalue ), Catch::Matchers::WithinAbs( vortex::real{}, 1e-05 ) );
}

TEST_CASE( "Metadata - property: \"superpart_factor\" - static", "[settings]" )
{
    nlohmann::json obj = { { "superpart_factor", 8.3 } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.superpart_factor();
    auto default_value = s_null.superpart_factor();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.superpart_factor();
    auto default_svalue = ss_null.superpart_factor();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE_THAT( static_cast< vortex::real >( svalue ), Catch::Matchers::WithinAbs( 8.3, 1e-05 ) );
    REQUIRE_THAT( static_cast< vortex::real >( default_svalue ), Catch::Matchers::WithinAbs( 1.0, 1e-05 ) );
}

TEST_CASE( "Metadata - property: \"src_flow_path\" - static", "[settings]" )
{
    nlohmann::json obj = { { "src_flow_path", "ptest" } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.src_flow_path();
    auto default_value = s_null.src_flow_path();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.src_flow_path();
    auto default_svalue = ss_null.src_flow_path();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == "ptest" );
    REQUIRE( default_svalue == "." );
}

TEST_CASE( "Metadata - property: \"src_part_path\" - static", "[settings]" )
{
    nlohmann::json obj = { { "src_part_path", "ptest" } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.src_part_path();
    auto default_value = s_null.src_part_path();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.src_part_path();
    auto default_svalue = ss_null.src_part_path();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == "ptest" );
    REQUIRE( default_svalue == "." );
}

TEST_CASE( "Metadata - property: \"part_output_delay\" - static", "[settings]" )
{
    nlohmann::json obj = { { "part_output_delay", 8l } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.part_output_delay();
    auto default_value = s_null.part_output_delay();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.part_output_delay();
    auto default_svalue = ss_null.part_output_delay();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( static_cast< vortex::i32 >( svalue ) == 8l );
    REQUIRE( static_cast< vortex::i32 >( default_svalue ) == vortex::i32{} );
}

TEST_CASE( "Metadata - property: \"is_perf_full_profile_enabled\" - static", "[settings]" )
{
    nlohmann::json obj = { { "is_perf_full_profile_enabled", true } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.is_perf_full_profile_enabled();
    auto default_value = s_null.is_perf_full_profile_enabled();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.is_perf_full_profile_enabled();
    auto default_svalue = ss_null.is_perf_full_profile_enabled();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == true );
    REQUIRE( default_svalue == bool{} );
}

TEST_CASE( "Metadata - property: \"is_perf_simple_enabled\" - static", "[settings]" )
{
    nlohmann::json obj = { { "is_perf_simple_enabled", true } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.is_perf_simple_enabled();
    auto default_value = s_null.is_perf_simple_enabled();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.is_perf_simple_enabled();
    auto default_svalue = ss_null.is_perf_simple_enabled();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == true );
    REQUIRE( default_svalue == bool{} );
}

TEST_CASE( "Metadata - property: \"is_perf_part_dist_enabled\" - static", "[settings]" )
{
    nlohmann::json obj = { { "is_perf_part_dist_enabled", true } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.is_perf_part_dist_enabled();
    auto default_value = s_null.is_perf_part_dist_enabled();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.is_perf_part_dist_enabled();
    auto default_svalue = ss_null.is_perf_part_dist_enabled();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( svalue == true );
    REQUIRE( default_svalue == bool{} );
}

TEST_CASE( "Metadata - property: \"perf_full_start\" - static", "[settings]" )
{
    nlohmann::json obj = { { "perf_full_start", 8l } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.perf_full_start();
    auto default_value = s_null.perf_full_start();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.perf_full_start();
    auto default_svalue = ss_null.perf_full_start();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( static_cast< vortex::i32 >( svalue ) == 8l );
    REQUIRE( static_cast< vortex::i32 >( default_svalue ) == vortex::i32{} );
}

TEST_CASE( "Metadata - property: \"perf_full_end\" - static", "[settings]" )
{
    nlohmann::json obj = { { "perf_full_end", 8l } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.perf_full_end();
    auto default_value = s_null.perf_full_end();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.perf_full_end();
    auto default_svalue = ss_null.perf_full_end();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( static_cast< vortex::i32 >( svalue ) == 8l );
    REQUIRE( static_cast< vortex::i32 >( default_svalue ) == vortex::i32{} );
}

TEST_CASE( "Metadata - property: \"part_perf_interval\" - static", "[settings]" )
{
    nlohmann::json obj = { { "part_perf_interval", 8l } };
    auto ds = vortex::core::settings::StaticSettingsDataStorage{};

    auto s = vortex::turb::legacy::settings::Metadata{ &obj };
    auto s_null = vortex::turb::legacy::settings::Metadata{};

    auto value = s.part_perf_interval();
    auto default_value = s_null.part_perf_interval();

    auto ss = vortex::turb::legacy::settings::to_static_unchecked( s, ds );
    auto ss_null = vortex::turb::legacy::settings::to_static_unchecked( s_null, ds );

    auto svalue = ss.part_perf_interval();
    auto default_svalue = ss_null.part_perf_interval();

    REQUIRE( value == svalue );
    REQUIRE( default_value == default_svalue );

    REQUIRE( static_cast< vortex::i32 >( svalue ) == 8l );
    REQUIRE( static_cast< vortex::i32 >( default_svalue ) == vortex::i32{} );
}


