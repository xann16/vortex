// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <ostream>

#include <nlohmann/json_fwd.hpp>

#include "core/common/types.hpp"
#include "core/settings/json/any_settings.hpp"
#include "turb/legacy/settings/enums/sim_method.hpp"
#include "turb/legacy/settings/enums/particle_mode.hpp"
#include "turb/legacy/settings/enums/gravity_mode.hpp"
#include "turb/legacy/settings/enums/particle_twc_kernel_type.hpp"

namespace vortex::turb::legacy::settings
{

class Metadata
{
public:
    Metadata() noexcept = default;
    explicit Metadata( nlohmann::json * data_p );
    explicit Metadata( core::settings::json::AnySettings s )
    :   Metadata( s.data() )
    {}

public:

    [[nodiscard]] nlohmann::json * data() const noexcept
    {
        return m_data_p;
    }
    [[nodiscard]] bool is_empty() const noexcept
    {
        return data() == nullptr;
    }
    [[nodiscard]] core::settings::json::AnySettings as_any() const noexcept
    {
        return core::settings::json::AnySettings{ data() };
    }

    Metadata& merge( nlohmann::json * other_data_p );
    Metadata& merge( core::settings::json::AnySettings const& other )
    {
        return merge( other.data() );
    }
    Metadata& merge( Metadata const& other )
    {
        return merge( other.data() );
    }

    [[nodiscard]] std::string to_string() const;
    std::ostream& stringify( std::ostream& os, int indent_size, int indent_level, bool display_all ) const;

    friend std::ostream& operator<<( std::ostream& os, Metadata const& s );

    friend bool operator==( Metadata const& lhs, Metadata const& rhs );
    friend bool operator!=( Metadata const& lhs, Metadata const& rhs )
    {
        return !( lhs == rhs );
    }

    // "sim_method" property
    [[nodiscard]] SimMethod sim_method() const;
    [[nodiscard]] bool has_sim_method_set() const noexcept;
    [[nodiscard]] constexpr SimMethod default_sim_method() const noexcept
    {
        return SimMethod::Dns;
    }
    void reset_sim_method();
    void set_sim_method( SimMethod sim_method );

    // "particle_mode" property
    [[nodiscard]] ParticleMode particle_mode() const;
    [[nodiscard]] bool has_particle_mode_set() const noexcept;
    [[nodiscard]] constexpr ParticleMode default_particle_mode() const noexcept
    {
        return ParticleMode::None;
    }
    void reset_particle_mode();
    void set_particle_mode( ParticleMode particle_mode );

    // "gravity_type" property
    [[nodiscard]] GravityMode gravity_type() const;
    [[nodiscard]] bool has_gravity_type_set() const noexcept;
    [[nodiscard]] constexpr GravityMode default_gravity_type() const noexcept
    {
        return GravityMode::None;
    }
    void reset_gravity_type();
    void set_gravity_type( GravityMode gravity_type );

    // "particle_kernel_type" property
    [[nodiscard]] ParticleTwcKernelType particle_kernel_type() const;
    [[nodiscard]] bool has_particle_kernel_type_set() const noexcept;
    [[nodiscard]] constexpr ParticleTwcKernelType default_particle_kernel_type() const noexcept
    {
        return ParticleTwcKernelType::Pnn;
    }
    void reset_particle_kernel_type();
    void set_particle_kernel_type( ParticleTwcKernelType particle_kernel_type );

    // "k_filter" property
    [[nodiscard]] i32 k_filter() const;
    [[nodiscard]] bool has_k_filter_set() const noexcept;
    [[nodiscard]] constexpr i32 default_k_filter() const noexcept
    {
        return i32{};
    }
    void reset_k_filter();
    void set_k_filter( i32 k_filter );

    // "C_K" property
    [[nodiscard]] real C_K() const;
    [[nodiscard]] bool has_C_K_set() const noexcept;
    [[nodiscard]] constexpr real default_C_K() const noexcept
    {
        return 2.5;
    }
    void reset_C_K();
    void set_C_K( real C_K );

    // "target_Phi" property
    [[nodiscard]] real target_Phi() const;
    [[nodiscard]] bool has_target_Phi_set() const noexcept;
    [[nodiscard]] constexpr real default_target_Phi() const noexcept
    {
        return real{};
    }
    void reset_target_Phi();
    void set_target_Phi( real target_Phi );

    // "superpart_factor" property
    [[nodiscard]] real superpart_factor() const;
    [[nodiscard]] bool has_superpart_factor_set() const noexcept;
    [[nodiscard]] constexpr real default_superpart_factor() const noexcept
    {
        return 1;
    }
    void reset_superpart_factor();
    void set_superpart_factor( real superpart_factor );

    // "src_flow_path" property
    [[nodiscard]] std::string_view src_flow_path() const;
    [[nodiscard]] bool has_src_flow_path_set() const noexcept;
    [[nodiscard]] constexpr std::string_view default_src_flow_path() const noexcept
    {
        return ".";
    }
    void reset_src_flow_path();
    void set_src_flow_path( std::string const& src_flow_path );
    void set_src_flow_path( std::string && src_flow_path );
    void set_src_flow_path( std::string_view src_flow_path )
    {
        set_src_flow_path( std::string{ src_flow_path } );
    }
    void set_src_flow_path( char const * src_flow_path )
    {
        set_src_flow_path( std::string{ src_flow_path } );
    }

    // "src_part_path" property
    [[nodiscard]] std::string_view src_part_path() const;
    [[nodiscard]] bool has_src_part_path_set() const noexcept;
    [[nodiscard]] constexpr std::string_view default_src_part_path() const noexcept
    {
        return ".";
    }
    void reset_src_part_path();
    void set_src_part_path( std::string const& src_part_path );
    void set_src_part_path( std::string && src_part_path );
    void set_src_part_path( std::string_view src_part_path )
    {
        set_src_part_path( std::string{ src_part_path } );
    }
    void set_src_part_path( char const * src_part_path )
    {
        set_src_part_path( std::string{ src_part_path } );
    }

    // "part_output_delay" property
    [[nodiscard]] i32 part_output_delay() const;
    [[nodiscard]] bool has_part_output_delay_set() const noexcept;
    [[nodiscard]] constexpr i32 default_part_output_delay() const noexcept
    {
        return i32{};
    }
    void reset_part_output_delay();
    void set_part_output_delay( i32 part_output_delay );

    // "is_perf_full_profile_enabled" property
    [[nodiscard]] bool is_perf_full_profile_enabled() const;
    [[nodiscard]] bool has_is_perf_full_profile_enabled_set() const noexcept;
    [[nodiscard]] constexpr bool default_is_perf_full_profile_enabled() const noexcept
    {
        return bool{};
    }
    void reset_is_perf_full_profile_enabled();
    void set_is_perf_full_profile_enabled( bool is_perf_full_profile_enabled );

    // "is_perf_simple_enabled" property
    [[nodiscard]] bool is_perf_simple_enabled() const;
    [[nodiscard]] bool has_is_perf_simple_enabled_set() const noexcept;
    [[nodiscard]] constexpr bool default_is_perf_simple_enabled() const noexcept
    {
        return bool{};
    }
    void reset_is_perf_simple_enabled();
    void set_is_perf_simple_enabled( bool is_perf_simple_enabled );

    // "is_perf_part_dist_enabled" property
    [[nodiscard]] bool is_perf_part_dist_enabled() const;
    [[nodiscard]] bool has_is_perf_part_dist_enabled_set() const noexcept;
    [[nodiscard]] constexpr bool default_is_perf_part_dist_enabled() const noexcept
    {
        return bool{};
    }
    void reset_is_perf_part_dist_enabled();
    void set_is_perf_part_dist_enabled( bool is_perf_part_dist_enabled );

    // "perf_full_start" property
    [[nodiscard]] i32 perf_full_start() const;
    [[nodiscard]] bool has_perf_full_start_set() const noexcept;
    [[nodiscard]] constexpr i32 default_perf_full_start() const noexcept
    {
        return i32{};
    }
    void reset_perf_full_start();
    void set_perf_full_start( i32 perf_full_start );

    // "perf_full_end" property
    [[nodiscard]] i32 perf_full_end() const;
    [[nodiscard]] bool has_perf_full_end_set() const noexcept;
    [[nodiscard]] constexpr i32 default_perf_full_end() const noexcept
    {
        return i32{};
    }
    void reset_perf_full_end();
    void set_perf_full_end( i32 perf_full_end );

    // "part_perf_interval" property
    [[nodiscard]] i32 part_perf_interval() const;
    [[nodiscard]] bool has_part_perf_interval_set() const noexcept;
    [[nodiscard]] constexpr i32 default_part_perf_interval() const noexcept
    {
        return i32{};
    }
    void reset_part_perf_interval();
    void set_part_perf_interval( i32 part_perf_interval );


private:
    nlohmann::json * m_data_p = nullptr;
}; // end of class Metadata

} // end of namespace vortex::turb::legacy::settings
