// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <nlohmann/json_fwd.hpp>

#include "core/common/types.hpp"
#include "turb/legacy/settings/enums/sim_method.hpp"
#include "turb/legacy/settings/enums/particle_mode.hpp"
#include "turb/legacy/settings/enums/gravity_mode.hpp"
#include "turb/legacy/settings/enums/particle_twc_kernel_type.hpp"

namespace vortex::turb::legacy::settings
{

class Metadata
{
public:
    explicit Metadata( nlohmann::json * data_p );

public:
    // "sim_method" property
    [[nodiscard]] SimMethod sim_method() const;
    [[nodiscard]] constexpr SimMethod default_sim_method() const noexcept
    {
        return SimMethod::Dns;
    }

    // "particle_mode" property
    [[nodiscard]] ParticleMode particle_mode() const;
    [[nodiscard]] constexpr ParticleMode default_particle_mode() const noexcept
    {
        return ParticleMode::None;
    }

    // "gravity_type" property
    [[nodiscard]] GravityMode gravity_type() const;
    [[nodiscard]] constexpr GravityMode default_gravity_type() const noexcept
    {
        return GravityMode::None;
    }

    // "particle_kernel_type" property
    [[nodiscard]] ParticleTwcKernelType particle_kernel_type() const;
    [[nodiscard]] constexpr ParticleTwcKernelType default_particle_kernel_type() const noexcept
    {
        return ParticleTwcKernelType::Pnn;
    }

    // "k_filter" property
    [[nodiscard]] i32 k_filter() const;
    [[nodiscard]] constexpr i32 default_k_filter() const noexcept
    {
        return i32{};
    }

    // "C_K" property
    [[nodiscard]] real C_K() const;
    [[nodiscard]] constexpr real default_C_K() const noexcept
    {
        return 2.5;
    }

    // "target_Phi" property
    [[nodiscard]] real target_Phi() const;
    [[nodiscard]] constexpr real default_target_Phi() const noexcept
    {
        return real{};
    }

    // "superpart_factor" property
    [[nodiscard]] real superpart_factor() const;
    [[nodiscard]] constexpr real default_superpart_factor() const noexcept
    {
        return 1;
    }

    // "src_flow_path" property
    [[nodiscard]] std::string_view src_flow_path() const;
    [[nodiscard]] constexpr std::string_view default_src_flow_path() const noexcept
    {
        return std::string_view{};
    }

    // "src_part_path" property
    [[nodiscard]] std::string_view src_part_path() const;
    [[nodiscard]] constexpr std::string_view default_src_part_path() const noexcept
    {
        return std::string_view{};
    }

    // "part_output_delay" property
    [[nodiscard]] i32 part_output_delay() const;
    [[nodiscard]] constexpr i32 default_part_output_delay() const noexcept
    {
        return i32{};
    }

    // "is_perf_full_profile_enabled" property
    [[nodiscard]] bool is_perf_full_profile_enabled() const;
    [[nodiscard]] constexpr bool default_is_perf_full_profile_enabled() const noexcept
    {
        return bool{};
    }

    // "is_perf_simple_enabled" property
    [[nodiscard]] bool is_perf_simple_enabled() const;
    [[nodiscard]] constexpr bool default_is_perf_simple_enabled() const noexcept
    {
        return bool{};
    }

    // "is_perf_part_dist_enabled" property
    [[nodiscard]] bool is_perf_part_dist_enabled() const;
    [[nodiscard]] constexpr bool default_is_perf_part_dist_enabled() const noexcept
    {
        return bool{};
    }

    // "perf_full_start" property
    [[nodiscard]] i32 perf_full_start() const;
    [[nodiscard]] constexpr i32 default_perf_full_start() const noexcept
    {
        return i32{};
    }

    // "perf_full_end" property
    [[nodiscard]] i32 perf_full_end() const;
    [[nodiscard]] constexpr i32 default_perf_full_end() const noexcept
    {
        return i32{};
    }

    // "part_perf_interval" property
    [[nodiscard]] i32 part_perf_interval() const;
    [[nodiscard]] constexpr i32 default_part_perf_interval() const noexcept
    {
        return i32{};
    }


private:
    nlohmann::json * m_data_p = nullptr;
}; // end of class Metadata

} // end of namespace vortex::turb::legacy::settings
