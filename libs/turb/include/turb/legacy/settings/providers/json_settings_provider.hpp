// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include "core/settings/json/any_settings.hpp"
#include "core/settings/json/settings_provider.hpp"
#include "turb/legacy/settings/settings.hpp"

namespace vortex::turb::legacy::settings::providers
{

class JsonSettingsProvider : public core::settings::json::SettingsProvider
{
public:
    using core::settings::json::SettingsProvider::SettingsProvider;

    JsonSettingsProvider( JsonSettingsProvider const& ) = delete;
    JsonSettingsProvider& operator=( JsonSettingsProvider const& ) = delete;
    JsonSettingsProvider( JsonSettingsProvider && ) = delete;
    JsonSettingsProvider& operator=( JsonSettingsProvider && ) = delete;

    ~JsonSettingsProvider() noexcept = default;

public:
    [[nodiscard]] Settings get_settings( std::filesystem::path const& key );
    [[nodiscard]] Settings get_settings( std::filesystem::path const& key, std::istream& is );
    [[nodiscard]] Settings get_settings( std::filesystem::path const& key, nlohmann::json * obj_p );

    [[nodiscard]] core::settings::json::AnySettings get_any( std::filesystem::path const& key );
    [[nodiscard]] core::settings::json::AnySettings get_any( std::filesystem::path const& key, std::istream& is );
    [[nodiscard]] core::settings::json::AnySettings get_any( std::filesystem::path const& key, nlohmann::json * obj_p );

}; // end of class JsonSettingsProvider

} // end of namespace vortex::turb::legacy::settings::providers
