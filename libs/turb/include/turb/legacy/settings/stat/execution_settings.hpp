// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <ostream>
#include <string_view>
#include <span>

#include "core/common/types.hpp"

namespace vortex::turb::legacy::settings::stat
{

class ExecutionSettings
{
public:
    ExecutionSettings() noexcept = default;
    ExecutionSettings( std::string_view job_name, std::string_view grant_no, i32 cpu_node_count, f64 wct_limit, i32 process_count, bool is_node_overcommit_enabled ) noexcept;
public:
    [[nodiscard]] constexpr std::string_view job_name() const noexcept
    {
        return m_job_name;
    }
    [[nodiscard]] constexpr std::string_view grant_no() const noexcept
    {
        return m_grant_no;
    }
    [[nodiscard]] constexpr i32 cpu_node_count() const noexcept
    {
        return m_cpu_node_count;
    }
    [[nodiscard]] constexpr f64 wct_limit() const noexcept
    {
        return m_wct_limit;
    }
    [[nodiscard]] constexpr i32 process_count() const noexcept
    {
        return m_process_count;
    }
    [[nodiscard]] constexpr bool is_node_overcommit_enabled() const noexcept
    {
        return m_is_node_overcommit_enabled;
    }

    [[nodiscard]] consteval bool has_extra_data() const noexcept
    {
        return true;
    }
    [[nodiscard]] constexpr std::size_t extra_data_size() const noexcept
    {
        return job_name().size() + 1ull + grant_no().size() + 1ull;
    }

    [[nodiscard]] std::string to_string() const;
    std::ostream& stringify( std::ostream& os, int indent_size, int indent_level ) const;

    friend std::ostream& operator<<( std::ostream& os, ExecutionSettings const& s );

private:
    std::string_view m_job_name = std::string_view{};
    std::string_view m_grant_no = std::string_view{};
    i32 m_cpu_node_count = 1;
    f64 m_wct_limit = 60.0;
    i32 m_process_count = 1;
    bool m_is_node_overcommit_enabled = bool{};
}; // end of class ExecutionSettings

} // end of namespace vortex::turb::legacy::settings::stat
