// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <ostream>
#include <string_view>
#include <span>

#include "core/common/types.hpp"
#include "turb/legacy/settings/enums/sim_method.hpp"
#include "turb/legacy/settings/enums/particle_mode.hpp"
#include "turb/legacy/settings/enums/gravity_mode.hpp"
#include "turb/legacy/settings/enums/particle_twc_kernel_type.hpp"

namespace vortex::turb::legacy::settings::stat
{

struct Metadata
{
    SimMethod sim_method = SimMethod::Dns;
    ParticleMode particle_mode = ParticleMode::None;
    GravityMode gravity_type = GravityMode::None;
    ParticleTwcKernelType particle_kernel_type = ParticleTwcKernelType::Pnn;
    i32 k_filter = i32{};
    real C_K = 2.5;
    real target_Phi = real{};
    real superpart_factor = 1.0;
    std::string_view src_flow_path = std::string_view{};
    std::string_view src_part_path = std::string_view{};
    i32 part_output_delay = i32{};
    bool is_perf_full_profile_enabled = bool{};
    bool is_perf_simple_enabled = bool{};
    bool is_perf_part_dist_enabled = bool{};
    i32 perf_full_start = i32{};
    i32 perf_full_end = i32{};
    i32 part_perf_interval = i32{};
    void * m_data_p = nullptr;

    [[nodiscard]] std::string to_string() const;
    std::ostream& stringify( std::ostream& os, int indent_size, int indent_level ) const;

    friend std::ostream& operator<<( std::ostream& os, Metadata const& s );

}; // end of class Metadata

} // end of namespace vortex::turb::legacy::settings::stat
