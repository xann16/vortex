// 
// Source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include "turb/legacy/settings/settings.hpp"

#include <iomanip>
#include <sstream>

#include <nlohmann/json.hpp>


namespace vortex::turb::legacy::settings
{

Settings::Settings( nlohmann::json * data_p )
:   m_data_p( data_p )
{
    pre_validate_all();
}

Settings& Settings::update_with( nlohmann::json * other_data_p )
{
    if (!is_empty() && other_data_p != nullptr)
    {
        as_any().update_with( other_data_p );
        pre_validate_all();
    }
    return *this;
}

[[nodiscard]] std::string Settings::to_string() const
{
    auto oss = std::ostringstream{};
    oss << *this;
    return oss.str();
}

std::ostream& Settings::stringify( std::ostream& os, int indent_size, int indent_level, bool display_all ) const
{
    if ( !display_all && ( is_empty() || data()->empty() ) )
    {
        os << "<empty>\n"; 
        return os;
    }
    
    if ( display_all || has_metadata_set() )
    {
        os << std::setw( indent_size * indent_level ) << "" << "metadata:\n";
        metadata().stringify( os, indent_size, indent_level + 1, display_all );
    }
    if ( display_all || has_parameters_set() )
    {
        os << std::setw( indent_size * indent_level ) << "" << "parameters:\n";
        parameters().stringify( os, indent_size, indent_level + 1, display_all );
    }
    if ( display_all || has_execution_settings_set() )
    {
        os << std::setw( indent_size * indent_level ) << "" << "execution_settings:\n";
        execution_settings().stringify( os, indent_size, indent_level + 1, display_all );
    }
    
    return os;
}

void Settings::validate()
{
    if ( has_metadata_set() )
    {
        metadata().validate();
    }
    
    if ( has_parameters_set() )
    {
        parameters().validate();
    }
    
    if ( has_execution_settings_set() )
    {
        execution_settings().validate();
    }
    
}

void Settings::pre_validate_all()
{
    if ( is_empty() ) return;
    
    if ( has_metadata_set() )
    {
        pre_validate_metadata( metadata() );
    }
    if ( has_parameters_set() )
    {
        pre_validate_parameters( parameters() );
    }
    if ( has_execution_settings_set() )
    {
        pre_validate_execution_settings( execution_settings() );
    }
}

std::ostream& operator<<( std::ostream& os, Settings const& s )
{
    return s.stringify( os, 2, 0, os.flags() & std::ios_base::boolalpha );
}

bool operator==( Settings const& lhs, Settings const& rhs )
{
    return lhs.is_empty()
        ? rhs.is_empty()
        : ( !rhs.is_empty() && *lhs.data() == *rhs.data() );
}

// "metadata" property

[[nodiscard]] turb::legacy::settings::Metadata Settings::metadata() const
{
    if ( is_empty() ) return default_metadata();
    auto it = data()->find( "metadata" );
    if ( it == data()->end() || it->is_null() ) return default_metadata();
    return turb::legacy::settings::Metadata{ &( *it ) };
}

[[nodiscard]] bool Settings::has_metadata_set() const noexcept
{
    if ( is_empty() ) return false;
    auto it = data()->find( "metadata" );
    return it != data()->end() && !it->is_null();
}

void Settings::reset_metadata()
{
    if ( is_empty() ) return;
    data()->erase( "metadata" );
}

void Settings::set_metadata( turb::legacy::settings::Metadata metadata )
{
    if ( is_empty() ) throw std::runtime_error{ "Cannot set value for property \"metadata\". Object is empty." };
    pre_validate_metadata( metadata );
    if ( metadata.is_empty() )
    {
        reset_metadata();
    }
    else
    {
        data()->operator[]( "metadata" ) = *( metadata.data() );
    }
}

void Settings::pre_validate_metadata( [[maybe_unused]] turb::legacy::settings::Metadata metadata )
{}

// "parameters" property

[[nodiscard]] turb::legacy::settings::Parameters Settings::parameters() const
{
    if ( is_empty() ) return default_parameters();
    auto it = data()->find( "parameters" );
    if ( it == data()->end() || it->is_null() ) return default_parameters();
    return turb::legacy::settings::Parameters{ &( *it ) };
}

[[nodiscard]] bool Settings::has_parameters_set() const noexcept
{
    if ( is_empty() ) return false;
    auto it = data()->find( "parameters" );
    return it != data()->end() && !it->is_null();
}

void Settings::reset_parameters()
{
    if ( is_empty() ) return;
    data()->erase( "parameters" );
}

void Settings::set_parameters( turb::legacy::settings::Parameters parameters )
{
    if ( is_empty() ) throw std::runtime_error{ "Cannot set value for property \"parameters\". Object is empty." };
    pre_validate_parameters( parameters );
    if ( parameters.is_empty() )
    {
        reset_parameters();
    }
    else
    {
        data()->operator[]( "parameters" ) = *( parameters.data() );
    }
}

void Settings::pre_validate_parameters( [[maybe_unused]] turb::legacy::settings::Parameters parameters )
{}

// "execution_settings" property

[[nodiscard]] turb::legacy::settings::ExecutionSettings Settings::execution_settings() const
{
    if ( is_empty() ) return default_execution_settings();
    auto it = data()->find( "execution_settings" );
    if ( it == data()->end() || it->is_null() ) return default_execution_settings();
    return turb::legacy::settings::ExecutionSettings{ &( *it ) };
}

[[nodiscard]] bool Settings::has_execution_settings_set() const noexcept
{
    if ( is_empty() ) return false;
    auto it = data()->find( "execution_settings" );
    return it != data()->end() && !it->is_null();
}

void Settings::reset_execution_settings()
{
    if ( is_empty() ) return;
    data()->erase( "execution_settings" );
}

void Settings::set_execution_settings( turb::legacy::settings::ExecutionSettings execution_settings )
{
    if ( is_empty() ) throw std::runtime_error{ "Cannot set value for property \"execution_settings\". Object is empty." };
    pre_validate_execution_settings( execution_settings );
    if ( execution_settings.is_empty() )
    {
        reset_execution_settings();
    }
    else
    {
        data()->operator[]( "execution_settings" ) = *( execution_settings.data() );
    }
}

void Settings::pre_validate_execution_settings( [[maybe_unused]] turb::legacy::settings::ExecutionSettings execution_settings )
{}


} // end of namespace vortex::turb::legacy::settings
