// 
// Source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include "turb/legacy/settings/parameters.hpp"

#include <nlohmann/json.hpp>

#include "turb/legacy/settings/enums/forcing_type_json_integration.hpp"
#include "turb/legacy/settings/enums/drag_type_json_integration.hpp"

namespace vortex::turb::legacy::settings
{

Parameters::Parameters( nlohmann::json * data_p )
:   m_data_p( data_p )
{
    // add initial validation
}

// "N" property

[[nodiscard]] i32 Parameters::N() const
{
    if ( m_data_p == nullptr ) return default_N();
    auto it = m_data_p->find( "N" );
    if ( it == m_data_p->end() || it->is_null() ) return default_N();
    return it->template get<i32>();
}

// "N_subdomain" property

[[nodiscard]] i32 Parameters::N_subdomain() const
{
    if ( m_data_p == nullptr ) return default_N_subdomain();
    auto it = m_data_p->find( "N_subdomain" );
    if ( it == m_data_p->end() || it->is_null() ) return default_N_subdomain();
    return it->template get<i32>();
}

// "Nt_max" property

[[nodiscard]] i32 Parameters::Nt_max() const
{
    if ( m_data_p == nullptr ) return default_Nt_max();
    auto it = m_data_p->find( "Nt_max" );
    if ( it == m_data_p->end() || it->is_null() ) return default_Nt_max();
    return it->template get<i32>();
}

// "dt" property

[[nodiscard]] real Parameters::dt() const
{
    if ( m_data_p == nullptr ) return default_dt();
    auto it = m_data_p->find( "dt" );
    if ( it == m_data_p->end() || it->is_null() ) return default_dt();
    return it->template get<real>();
}

// "rnu" property

[[nodiscard]] real Parameters::rnu() const
{
    if ( m_data_p == nullptr ) return default_rnu();
    auto it = m_data_p->find( "rnu" );
    if ( it == m_data_p->end() || it->is_null() ) return default_rnu();
    return it->template get<real>();
}

// "t_init" property

[[nodiscard]] real Parameters::t_init() const
{
    if ( m_data_p == nullptr ) return default_t_init();
    auto it = m_data_p->find( "t_init" );
    if ( it == m_data_p->end() || it->is_null() ) return default_t_init();
    return it->template get<real>();
}

// "is_flow_generated" property

[[nodiscard]] bool Parameters::is_flow_generated() const
{
    if ( m_data_p == nullptr ) return default_is_flow_generated();
    auto it = m_data_p->find( "is_flow_generated" );
    if ( it == m_data_p->end() || it->is_null() ) return default_is_flow_generated();
    return it->template get<bool>();
}

// "deterministic_seed" property

[[nodiscard]] u64 Parameters::deterministic_seed() const
{
    if ( m_data_p == nullptr ) return default_deterministic_seed();
    auto it = m_data_p->find( "deterministic_seed" );
    if ( it == m_data_p->end() || it->is_null() ) return default_deterministic_seed();
    return it->template get<u64>();
}

// "input_velo_index" property

[[nodiscard]] i32 Parameters::input_velo_index() const
{
    if ( m_data_p == nullptr ) return default_input_velo_index();
    auto it = m_data_p->find( "input_velo_index" );
    if ( it == m_data_p->end() || it->is_null() ) return default_input_velo_index();
    return it->template get<i32>();
}

// "forcing_type" property

[[nodiscard]] ForcingType Parameters::forcing_type() const
{
    if ( m_data_p == nullptr ) return default_forcing_type();
    auto it = m_data_p->find( "forcing_type" );
    if ( it == m_data_p->end() || it->is_null() ) return default_forcing_type();
    return it->template get<ForcingType>();
}

// "deterministic_forcing_k_1" property

[[nodiscard]] real Parameters::deterministic_forcing_k_1() const
{
    if ( m_data_p == nullptr ) return default_deterministic_forcing_k_1();
    auto it = m_data_p->find( "deterministic_forcing_k_1" );
    if ( it == m_data_p->end() || it->is_null() ) return default_deterministic_forcing_k_1();
    return it->template get<real>();
}

// "deterministic_forcing_k_2" property

[[nodiscard]] real Parameters::deterministic_forcing_k_2() const
{
    if ( m_data_p == nullptr ) return default_deterministic_forcing_k_2();
    auto it = m_data_p->find( "deterministic_forcing_k_2" );
    if ( it == m_data_p->end() || it->is_null() ) return default_deterministic_forcing_k_2();
    return it->template get<real>();
}

// "stochastic_seed" property

[[nodiscard]] u64 Parameters::stochastic_seed() const
{
    if ( m_data_p == nullptr ) return default_stochastic_seed();
    auto it = m_data_p->find( "stochastic_seed" );
    if ( it == m_data_p->end() || it->is_null() ) return default_stochastic_seed();
    return it->template get<u64>();
}

// "stats_output_interval" property

[[nodiscard]] i32 Parameters::stats_output_interval() const
{
    if ( m_data_p == nullptr ) return default_stats_output_interval();
    auto it = m_data_p->find( "stats_output_interval" );
    if ( it == m_data_p->end() || it->is_null() ) return default_stats_output_interval();
    return it->template get<i32>();
}

// "spectrum_output_interval" property

[[nodiscard]] i32 Parameters::spectrum_output_interval() const
{
    if ( m_data_p == nullptr ) return default_spectrum_output_interval();
    auto it = m_data_p->find( "spectrum_output_interval" );
    if ( it == m_data_p->end() || it->is_null() ) return default_spectrum_output_interval();
    return it->template get<i32>();
}

// "is_stats_output_extended" property

[[nodiscard]] bool Parameters::is_stats_output_extended() const
{
    if ( m_data_p == nullptr ) return default_is_stats_output_extended();
    auto it = m_data_p->find( "is_stats_output_extended" );
    if ( it == m_data_p->end() || it->is_null() ) return default_is_stats_output_extended();
    return it->template get<bool>();
}

// "rho_part" property

[[nodiscard]] real Parameters::rho_part() const
{
    if ( m_data_p == nullptr ) return default_rho_part();
    auto it = m_data_p->find( "rho_part" );
    if ( it == m_data_p->end() || it->is_null() ) return default_rho_part();
    return it->template get<real>();
}

// "rho_fluid" property

[[nodiscard]] real Parameters::rho_fluid() const
{
    if ( m_data_p == nullptr ) return default_rho_fluid();
    auto it = m_data_p->find( "rho_fluid" );
    if ( it == m_data_p->end() || it->is_null() ) return default_rho_fluid();
    return it->template get<real>();
}

// "eta_k_init" property

[[nodiscard]] real Parameters::eta_k_init() const
{
    if ( m_data_p == nullptr ) return default_eta_k_init();
    auto it = m_data_p->find( "eta_k_init" );
    if ( it == m_data_p->end() || it->is_null() ) return default_eta_k_init();
    return it->template get<real>();
}

// "tau_k_init" property

[[nodiscard]] real Parameters::tau_k_init() const
{
    if ( m_data_p == nullptr ) return default_tau_k_init();
    auto it = m_data_p->find( "tau_k_init" );
    if ( it == m_data_p->end() || it->is_null() ) return default_tau_k_init();
    return it->template get<real>();
}

// "shell_thickness" property

[[nodiscard]] real Parameters::shell_thickness() const
{
    if ( m_data_p == nullptr ) return default_shell_thickness();
    auto it = m_data_p->find( "shell_thickness" );
    if ( it == m_data_p->end() || it->is_null() ) return default_shell_thickness();
    return it->template get<real>();
}

// "epsilon_env" property

[[nodiscard]] real Parameters::epsilon_env() const
{
    if ( m_data_p == nullptr ) return default_epsilon_env();
    auto it = m_data_p->find( "epsilon_env" );
    if ( it == m_data_p->end() || it->is_null() ) return default_epsilon_env();
    return it->template get<real>();
}

// "nu_fluid" property

[[nodiscard]] real Parameters::nu_fluid() const
{
    if ( m_data_p == nullptr ) return default_nu_fluid();
    auto it = m_data_p->find( "nu_fluid" );
    if ( it == m_data_p->end() || it->is_null() ) return default_nu_fluid();
    return it->template get<real>();
}

// "gravity" property

[[nodiscard]] real Parameters::gravity() const
{
    if ( m_data_p == nullptr ) return default_gravity();
    auto it = m_data_p->find( "gravity" );
    if ( it == m_data_p->end() || it->is_null() ) return default_gravity();
    return it->template get<real>();
}

// "is_part_generated" property

[[nodiscard]] bool Parameters::is_part_generated() const
{
    if ( m_data_p == nullptr ) return default_is_part_generated();
    auto it = m_data_p->find( "is_part_generated" );
    if ( it == m_data_p->end() || it->is_null() ) return default_is_part_generated();
    return it->template get<bool>();
}

// "is_part_overlapping" property

[[nodiscard]] bool Parameters::is_part_overlapping() const
{
    if ( m_data_p == nullptr ) return default_is_part_overlapping();
    auto it = m_data_p->find( "is_part_overlapping" );
    if ( it == m_data_p->end() || it->is_null() ) return default_is_part_overlapping();
    return it->template get<bool>();
}

// "is_part_hdi_enabled" property

[[nodiscard]] bool Parameters::is_part_hdi_enabled() const
{
    if ( m_data_p == nullptr ) return default_is_part_hdi_enabled();
    auto it = m_data_p->find( "is_part_hdi_enabled" );
    if ( it == m_data_p->end() || it->is_null() ) return default_is_part_hdi_enabled();
    return it->template get<bool>();
}

// "part_hdi_trunc_enabled" property

[[nodiscard]] real Parameters::part_hdi_trunc_enabled() const
{
    if ( m_data_p == nullptr ) return default_part_hdi_trunc_enabled();
    auto it = m_data_p->find( "part_hdi_trunc_enabled" );
    if ( it == m_data_p->end() || it->is_null() ) return default_part_hdi_trunc_enabled();
    return it->template get<real>();
}

// "N_part" property

[[nodiscard]] i32 Parameters::N_part() const
{
    if ( m_data_p == nullptr ) return default_N_part();
    auto it = m_data_p->find( "N_part" );
    if ( it == m_data_p->end() || it->is_null() ) return default_N_part();
    return it->template get<i32>();
}

// "drag_type" property

[[nodiscard]] DragType Parameters::drag_type() const
{
    if ( m_data_p == nullptr ) return default_drag_type();
    auto it = m_data_p->find( "drag_type" );
    if ( it == m_data_p->end() || it->is_null() ) return default_drag_type();
    return it->template get<DragType>();
}

// "a" property

[[nodiscard]] real Parameters::a() const
{
    if ( m_data_p == nullptr ) return default_a();
    auto it = m_data_p->find( "a" );
    if ( it == m_data_p->end() || it->is_null() ) return default_a();
    return it->template get<real>();
}


} // end of namespace vortex::turb::legacy::settings
