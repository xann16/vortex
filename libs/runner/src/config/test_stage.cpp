// 
// Source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include "runner/config/test_stage.hpp"

#include <iomanip>
#include <sstream>

#include <nlohmann/json.hpp>


namespace vortex::runner::config
{

TestStage::TestStage( nlohmann::json * data_p )
:   m_data_p( data_p )
{
    pre_validate_all();
}

TestStage& TestStage::update_with( nlohmann::json * other_data_p )
{
    if (!is_empty() && other_data_p != nullptr)
    {
        as_any().update_with( other_data_p );
        pre_validate_all();
    }
    return *this;
}

[[nodiscard]] std::string TestStage::to_string() const
{
    auto oss = std::ostringstream{};
    oss << *this;
    return oss.str();
}

std::ostream& TestStage::stringify( std::ostream& os, int indent_size, int indent_level, bool display_all ) const
{
    if ( !display_all && ( is_empty() || data()->empty() ) )
    {
        os << "<empty>\n"; 
        return os;
    }
    
    if ( display_all || has_name_set() )
    {
        os << std::setw( indent_size * indent_level ) << "" << "name: " << name() << '\n';
    }
    if ( display_all || has_settings_set() )
    {
        os << std::setw( indent_size * indent_level ) << "" << "settings:\n";
        settings().stringify( os, indent_size, indent_level + 1, display_all );
    }
    
    return os;
}

void TestStage::validate()
{
    if ( !has_name_set() )
    {
        throw std::runtime_error{ "Validation failed for property 'name': Required property is not specified." };
    }
    
}

void TestStage::pre_validate_all()
{
    if ( is_empty() ) return;
    
    if ( has_name_set() )
    {
        pre_validate_name( name() );
    }
    if ( has_settings_set() )
    {
        pre_validate_settings( settings() );
    }
}

std::ostream& operator<<( std::ostream& os, TestStage const& s )
{
    return s.stringify( os, 2, 0, os.flags() & std::ios_base::boolalpha );
}

bool operator==( TestStage const& lhs, TestStage const& rhs )
{
    return lhs.is_empty()
        ? rhs.is_empty()
        : ( !rhs.is_empty() && *lhs.data() == *rhs.data() );
}

// "name" property

[[nodiscard]] std::string_view TestStage::name() const
{
    if ( is_empty() ) return default_name();
    auto it = data()->find( "name" );
    if ( it == data()->end() || it->is_null() ) return default_name();
    return std::string_view{ it->template get_ref<std::string const&>() };
}

[[nodiscard]] bool TestStage::has_name_set() const noexcept
{
    if ( is_empty() ) return false;
    auto it = data()->find( "name" );
    return it != data()->end() && !it->is_null();
}

void TestStage::reset_name()
{
    throw std::runtime_error{ "Property 'name' is required. It cannot be reset." };
}

void TestStage::set_name( std::string const& name )
{
    if ( is_empty() ) throw std::runtime_error{ "Cannot set value for property \"name\". Object is empty." };
    data()->operator[]( "name" ) = name;
}
void TestStage::set_name( std::string && name )
{
    if ( is_empty() ) throw std::runtime_error{ "Cannot set value for property \"name\". Object is empty." };
    data()->operator[]( "name" ) = name;
}

void TestStage::pre_validate_name( [[maybe_unused]] std::string_view name )
{
    if ( name.empty() )
    {
        throw std::runtime_error{ "Validation failed for property 'name': Value is empty." };
    }
    
}

// "settings" property

[[nodiscard]] core::settings::json::AnySettings TestStage::settings() const
{
    if ( is_empty() ) return default_settings();
    auto it = data()->find( "settings" );
    if ( it == data()->end() || it->is_null() ) return default_settings();
    return core::settings::json::AnySettings{ &( *it ) };
}

[[nodiscard]] bool TestStage::has_settings_set() const noexcept
{
    if ( is_empty() ) return false;
    auto it = data()->find( "settings" );
    return it != data()->end() && !it->is_null();
}

void TestStage::reset_settings()
{
    if ( is_empty() ) return;
    data()->erase( "settings" );
}

void TestStage::set_settings( core::settings::json::AnySettings settings )
{
    if ( is_empty() ) throw std::runtime_error{ "Cannot set value for property \"settings\". Object is empty." };
    if ( settings.is_empty() )
    {
        reset_settings();
    }
    else
    {
        data()->operator[]( "settings" ) = *( settings.data() );
    }
}

void TestStage::pre_validate_settings( [[maybe_unused]] core::settings::json::AnySettings settings )
{}


} // end of namespace vortex::runner::config
