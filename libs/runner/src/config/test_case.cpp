// 
// Source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include "runner/config/test_case.hpp"

#include <nlohmann/json.hpp>

namespace vortex::runner::config
{

TestCase::TestCase( nlohmann::json * data_p )
:   m_data_p( data_p )
{
    // add initial validation
}

// "name" property

[[nodiscard]] std::string_view TestCase::name() const
{
    if ( m_data_p == nullptr ) return default_name();
    auto it = m_data_p->find( "name" );
    if ( it == m_data_p->end() || it->is_null() ) return default_name();
    return std::string_view{ it->template get_ref<std::string const&>() };
}

// "template_name" property

[[nodiscard]] std::string_view TestCase::template_name() const
{
    if ( m_data_p == nullptr ) return default_template_name();
    auto it = m_data_p->find( "template_name" );
    if ( it == m_data_p->end() || it->is_null() ) return default_template_name();
    return std::string_view{ it->template get_ref<std::string const&>() };
}

// "settings" property

[[nodiscard]] /* TODO: settings opaque interface */ void * TestCase::settings() const
{
    if ( m_data_p == nullptr ) throw std::runtime_error( "TestCase: cannot get default value of unset property with settings type." );
    return nullptr;
}

// "parallel_strategy" property

[[nodiscard]] /* TODO: enum type */ i32 TestCase::parallel_strategy() const
{
    if ( m_data_p == nullptr ) return default_parallel_strategy();
    return 0;
}

// "stages" property

[[nodiscard]] std::string_view TestCase::stages() const
{
    if ( m_data_p == nullptr ) return default_stages();
    auto it = m_data_p->find( "stages" );
    if ( it == m_data_p->end() || it->is_null() ) return default_stages();
    return std::string_view{ it->template get_ref<std::string const&>() };
}

// "process_count" property

[[nodiscard]] i32 TestCase::process_count() const
{
    if ( m_data_p == nullptr ) return default_process_count();
    auto it = m_data_p->find( "process_count" );
    if ( it == m_data_p->end() || it->is_null() ) return default_process_count();
    return it->template get<i32>();
}


} // end of namespace vortex::runner::config
