// 
// Unit test source file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#include <cstring>
#include <string>
#include <catch2/catch_test_macros.hpp>
#include <nlohmann/json.hpp>
#include "runner/config/enums/parallel_strategy_type.hpp"
#include "runner/config/enums/parallel_strategy_type_json_integration.hpp"

TEST_CASE( "ParallelStrategyType - conversion between enums and strings", "[sample]" )
{
    using namespace std::string_literals;

    // Testing conversions for ParallelStrategyType::Mmx
    REQUIRE( vortex::runner::config::to_string( vortex::runner::config::ParallelStrategyType::Mmx ) == "mmx"s );
    REQUIRE( std::strcmp( vortex::runner::config::to_c_str( vortex::runner::config::ParallelStrategyType::Mmx ), "mmx" ) == 0 );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "mmx" ) == vortex::runner::config::ParallelStrategyType::Mmx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "mmx"s ) == vortex::runner::config::ParallelStrategyType::Mmx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( vortex::runner::config::to_string( vortex::runner::config::ParallelStrategyType::Mmx ) ) == vortex::runner::config::ParallelStrategyType::Mmx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( vortex::runner::config::to_c_str( vortex::runner::config::ParallelStrategyType::Mmx ) ) == vortex::runner::config::ParallelStrategyType::Mmx );

    // Testing conversions for ParallelStrategyType::Mxx
    REQUIRE( vortex::runner::config::to_string( vortex::runner::config::ParallelStrategyType::Mxx ) == "mxx"s );
    REQUIRE( std::strcmp( vortex::runner::config::to_c_str( vortex::runner::config::ParallelStrategyType::Mxx ), "mxx" ) == 0 );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "mxx" ) == vortex::runner::config::ParallelStrategyType::Mxx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "mxx"s ) == vortex::runner::config::ParallelStrategyType::Mxx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( vortex::runner::config::to_string( vortex::runner::config::ParallelStrategyType::Mxx ) ) == vortex::runner::config::ParallelStrategyType::Mxx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( vortex::runner::config::to_c_str( vortex::runner::config::ParallelStrategyType::Mxx ) ) == vortex::runner::config::ParallelStrategyType::Mxx );

    // Testing conversions for ParallelStrategyType::Xxx
    REQUIRE( vortex::runner::config::to_string( vortex::runner::config::ParallelStrategyType::Xxx ) == "xxx"s );
    REQUIRE( std::strcmp( vortex::runner::config::to_c_str( vortex::runner::config::ParallelStrategyType::Xxx ), "xxx" ) == 0 );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "xxx" ) == vortex::runner::config::ParallelStrategyType::Xxx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "xxx"s ) == vortex::runner::config::ParallelStrategyType::Xxx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( vortex::runner::config::to_string( vortex::runner::config::ParallelStrategyType::Xxx ) ) == vortex::runner::config::ParallelStrategyType::Xxx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( vortex::runner::config::to_c_str( vortex::runner::config::ParallelStrategyType::Xxx ) ) == vortex::runner::config::ParallelStrategyType::Xxx );

    // Testing conversions for values out of range
    REQUIRE( vortex::runner::config::to_string( static_cast< vortex::runner::config::ParallelStrategyType >( 3 ) ) == "unknown"s );
    REQUIRE( std::strcmp( vortex::runner::config::to_c_str( static_cast< vortex::runner::config::ParallelStrategyType >( 3 ) ), "unknown" ) == 0 );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( "" ) == vortex::runner::config::ParallelStrategyType::Mmx );
    REQUIRE( vortex::runner::config::to_parallel_strategy_type( ""s ) == vortex::runner::config::ParallelStrategyType::Mmx );
}


TEST_CASE( "ParallelStrategyType - integration with json serialization", "[sample]" )
{
    nlohmann::json mmx_json_from_enum = vortex::runner::config::ParallelStrategyType::Mmx;
    nlohmann::json mmx_json_from_str = "mmx";
    nlohmann::json mxx_json_from_enum = vortex::runner::config::ParallelStrategyType::Mxx;
    nlohmann::json mxx_json_from_str = "mxx";
    nlohmann::json xxx_json_from_enum = vortex::runner::config::ParallelStrategyType::Xxx;
    nlohmann::json xxx_json_from_str = "xxx";
    nlohmann::json invalid_json_from_str = "unknown";

    REQUIRE( mmx_json_from_enum == "mmx" );
    REQUIRE( mmx_json_from_str == "mmx" );
    REQUIRE( mxx_json_from_enum == "mxx" );
    REQUIRE( mxx_json_from_str == "mxx" );
    REQUIRE( xxx_json_from_enum == "xxx" );
    REQUIRE( xxx_json_from_str == "xxx" );
    REQUIRE( invalid_json_from_str == "unknown" );

    REQUIRE( mmx_json_from_enum.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Mmx );
    REQUIRE( mmx_json_from_str.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Mmx );
    REQUIRE( mxx_json_from_enum.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Mxx );
    REQUIRE( mxx_json_from_str.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Mxx );
    REQUIRE( xxx_json_from_enum.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Xxx );
    REQUIRE( xxx_json_from_str.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Xxx );
    REQUIRE( invalid_json_from_str.template get< vortex::runner::config::ParallelStrategyType >() == vortex::runner::config::ParallelStrategyType::Mmx );
}
