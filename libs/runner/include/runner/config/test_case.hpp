// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <nlohmann/json_fwd.hpp>

#include "core/common/types.hpp"
#include "runner/config/enums/parallel_strategy_type.hpp"

namespace vortex::runner::config
{

class TestCase
{
public:
    explicit TestCase( nlohmann::json * data_p );

public:
    // "name" property
    [[nodiscard]] std::string_view name() const;
    [[nodiscard]] constexpr std::string_view default_name() const noexcept
    {
        return std::string_view{};
    }

    // "template_name" property
    [[nodiscard]] std::string_view template_name() const;
    [[nodiscard]] constexpr std::string_view default_template_name() const noexcept
    {
        return std::string_view{};
    }

    // "settings" property
    [[nodiscard]] /* TODO: settings opaque interface */ void * settings() const;

    // "parallel_strategy" property
    [[nodiscard]] ParallelStrategyType parallel_strategy() const;
    [[nodiscard]] constexpr ParallelStrategyType default_parallel_strategy() const noexcept
    {
        return ParallelStrategyType::Mmx;
    }

    // "stages" property
    [[nodiscard]] std::string_view stages() const;
    [[nodiscard]] constexpr std::string_view default_stages() const noexcept
    {
        return std::string_view{};
    }

    // "process_count" property
    [[nodiscard]] i32 process_count() const;
    [[nodiscard]] constexpr i32 default_process_count() const noexcept
    {
        return 1;
    }


private:
    nlohmann::json * m_data_p = nullptr;
}; // end of class TestCase

} // end of namespace vortex::runner::config
