// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <ostream>

#include <nlohmann/json_fwd.hpp>

#include "core/common/types.hpp"
#include "core/settings/json/any_settings.hpp"
#include "runner/config/test_case.hpp"
#include "runner/config/test_stage.hpp"

namespace vortex::runner::config
{

class TestFixture
{
public:
    TestFixture() noexcept = default;
    explicit TestFixture( nlohmann::json * data_p );
    explicit TestFixture( core::settings::json::AnySettings s )
    :   TestFixture( s.data() )
    {}

public:

    [[nodiscard]] nlohmann::json * data() const noexcept
    {
        return m_data_p;
    }
    [[nodiscard]] bool is_empty() const noexcept
    {
        return data() == nullptr;
    }
    [[nodiscard]] core::settings::json::AnySettings as_any() const noexcept
    {
        return core::settings::json::AnySettings{ data() };
    }

    TestFixture& merge( nlohmann::json * other_data_p );
    TestFixture& merge( core::settings::json::AnySettings const& other )
    {
        return merge( other.data() );
    }
    TestFixture& merge( TestFixture const& other )
    {
        return merge( other.data() );
    }

    [[nodiscard]] std::string to_string() const;
    std::ostream& stringify( std::ostream& os, int indent_size, int indent_level, bool display_all ) const;

    friend std::ostream& operator<<( std::ostream& os, TestFixture const& s );

    // "name" property
    [[nodiscard]] std::string_view name() const;
    [[nodiscard]] bool has_name_set() const noexcept;
    [[nodiscard]] constexpr std::string_view default_name() const noexcept
    {
        return std::string_view{};
    }

    // "root_path" property
    [[nodiscard]] std::string_view root_path() const;
    [[nodiscard]] bool has_root_path_set() const noexcept;
    [[nodiscard]] constexpr std::string_view default_root_path() const noexcept
    {
        return ".";
    }

    // "default_settings" property
    [[nodiscard]] core::settings::json::AnySettings default_settings() const;
    [[nodiscard]] bool has_default_settings_set() const noexcept;
    [[nodiscard]] constexpr core::settings::json::AnySettings default_default_settings() const noexcept
    {
        return core::settings::json::AnySettings{};;
    }

    // "test_cases" property
    [[nodiscard]] runner::config::TestCase test_cases() const;
    [[nodiscard]] bool has_test_cases_set() const noexcept;
    [[nodiscard]] constexpr runner::config::TestCase default_test_cases() const noexcept
    {
        return runner::config::TestCase{};;
    }

    // "test_stages" property
    [[nodiscard]] runner::config::TestStage test_stages() const;
    [[nodiscard]] bool has_test_stages_set() const noexcept;
    [[nodiscard]] constexpr runner::config::TestStage default_test_stages() const noexcept
    {
        return runner::config::TestStage{};;
    }


private:
    nlohmann::json * m_data_p = nullptr;
}; // end of class TestFixture

} // end of namespace vortex::runner::config
