// 
// Header file auto-generated by VORTEX SETTINGS WIZARD
// 
// TODO: Just testing
// 

#pragma once

#include <ostream>

#include <nlohmann/json_fwd.hpp>

#include "core/common/types.hpp"
#include "core/settings/json/any_settings.hpp"
#include "runner/config/test_case.hpp"
#include "runner/config/test_stage.hpp"

namespace vortex::runner::config
{

class TestFixture
{
public:
    TestFixture() noexcept = default;
    explicit TestFixture( nlohmann::json * data_p );
    explicit TestFixture( core::settings::json::AnySettings s )
    :   TestFixture( s.data() )
    {}

public:

    [[nodiscard]] nlohmann::json * data() const noexcept
    {
        return m_data_p;
    }
    [[nodiscard]] bool is_empty() const noexcept
    {
        return data() == nullptr;
    }
    [[nodiscard]] core::settings::json::AnySettings as_any() const noexcept
    {
        return core::settings::json::AnySettings{ data() };
    }

    TestFixture& update_with( nlohmann::json * other_data_p );
    TestFixture& update_with( core::settings::json::AnySettings const& other )
    {
        return update_with( other.data() );
    }
    TestFixture& update_with( TestFixture const& other )
    {
        return update_with( other.data() );
    }

    [[nodiscard]] consteval bool has_extra_data() const noexcept
    {
        return false;
    }
    [[nodiscard]] std::size_t extra_data_size() const
    {
        throw std::runtime_error{ "Unsupported operation for settings with abstract nested settings or arrays." };
    }

    [[nodiscard]] std::string to_string() const;
    std::ostream& stringify( std::ostream& os, int indent_size, int indent_level, bool display_all ) const;

    void validate();

    friend std::ostream& operator<<( std::ostream& os, TestFixture const& s );

    friend bool operator==( TestFixture const& lhs, TestFixture const& rhs );
    friend bool operator!=( TestFixture const& lhs, TestFixture const& rhs )
    {
        return !( lhs == rhs );
    }

    // "name" property
    [[nodiscard]] std::string_view name() const;
    [[nodiscard]] bool has_name_set() const noexcept;
    [[nodiscard]] constexpr std::string_view default_name() const noexcept
    {
        return std::string_view{};
    }
    void reset_name();
    void set_name( std::string const& name );
    void set_name( std::string && name );
    void set_name( std::string_view name )
    {
        set_name( std::string{ name } );
    }
    void set_name( char const * name )
    {
        set_name( std::string{ name } );
    }

    // "root_path" property
    [[nodiscard]] std::string_view root_path() const;
    [[nodiscard]] bool has_root_path_set() const noexcept;
    [[nodiscard]] constexpr std::string_view default_root_path() const noexcept
    {
        return ".";
    }
    void reset_root_path();
    void set_root_path( std::string const& root_path );
    void set_root_path( std::string && root_path );
    void set_root_path( std::string_view root_path )
    {
        set_root_path( std::string{ root_path } );
    }
    void set_root_path( char const * root_path )
    {
        set_root_path( std::string{ root_path } );
    }

    // "default_settings" property
    [[nodiscard]] core::settings::json::AnySettings default_settings() const;
    [[nodiscard]] bool has_default_settings_set() const noexcept;
    [[nodiscard]] constexpr core::settings::json::AnySettings default_default_settings() const noexcept
    {
        return core::settings::json::AnySettings{};
    }
    void reset_default_settings();
    void set_default_settings( core::settings::json::AnySettings default_settings );

    // "test_cases" property
    [[nodiscard]] std::vector< runner::config::TestCase > test_cases() const;
    [[nodiscard]] bool has_test_cases_set() const noexcept;
    [[nodiscard]] std::vector< runner::config::TestCase > default_test_cases() const noexcept
    {
        return std::vector< runner::config::TestCase >{};
    }
    void reset_test_cases();
    void set_test_cases( std::vector< runner::config::TestCase > const& test_cases );
    void set_test_cases( std::vector< runner::config::TestCase > && test_cases );
    void set_test_cases( std::initializer_list< runner::config::TestCase > test_cases_list );
    [[nodiscard]] bool are_test_cases_empty() const noexcept;
    [[nodiscard]] std::size_t test_cases_count() const noexcept;
    void clear_test_cases();
    [[nodiscard]] runner::config::TestCase test_case_at( std::size_t index ) const;
    void add_test_case( runner::config::TestCase test_case );
    void remove_test_case_at( std::size_t index );
    void remove_test_case( runner::config::TestCase );

    // "test_stages" property
    [[nodiscard]] std::vector< runner::config::TestStage > test_stages() const;
    [[nodiscard]] bool has_test_stages_set() const noexcept;
    [[nodiscard]] std::vector< runner::config::TestStage > default_test_stages() const noexcept
    {
        return std::vector< runner::config::TestStage >{};
    }
    void reset_test_stages();
    void set_test_stages( std::vector< runner::config::TestStage > const& test_stages );
    void set_test_stages( std::vector< runner::config::TestStage > && test_stages );
    void set_test_stages( std::initializer_list< runner::config::TestStage > test_stages_list );
    [[nodiscard]] bool are_test_stages_empty() const noexcept;
    [[nodiscard]] std::size_t test_stages_count() const noexcept;
    void clear_test_stages();
    [[nodiscard]] runner::config::TestStage test_stage_at( std::size_t index ) const;
    void add_test_stage( runner::config::TestStage test_stage );
    void remove_test_stage_at( std::size_t index );
    void remove_test_stage( runner::config::TestStage );


private:
    void pre_validate_all();
    static void pre_validate_name( [[maybe_unused]] std::string_view name );
    static void pre_validate_root_path( [[maybe_unused]] std::string_view root_path );
    static void pre_validate_default_settings( [[maybe_unused]] core::settings::json::AnySettings default_settings );
    static void pre_validate_test_cases( [[maybe_unused]] std::vector< runner::config::TestCase > const& test_cases );
    void pre_validate_test_case( [[maybe_unused]] runner::config::TestCase test_case );
    static void pre_validate_test_stages( [[maybe_unused]] std::vector< runner::config::TestStage > const& test_stages );
    void pre_validate_test_stage( [[maybe_unused]] runner::config::TestStage test_stage );

private:
    nlohmann::json * m_data_p = nullptr;
}; // end of class TestFixture

} // end of namespace vortex::runner::config
