from cpp_utils import add_include, add_blank, add_block_comment
import os
from typing import Any

def _create_file(path: str, content: list[str]):
    dir_path = os.path.dirname(path)
    os.makedirs(dir_path, exist_ok=True)
    with open(path, mode='w', encoding='utf-8') as fp:
        fp.writelines(content)

def get_header_path(root_path: str, data: dict[str, Any], suffix: str = ''):
    package_name : str = data['__metadata__']['package'].lstrip('*')
    module_name : str = data['__metadata__']['module']
    namespace_path : list[str] = data['__metadata__']['namespace']
    path = os.path.join(root_path, package_name, 'include', package_name, *namespace_path, module_name + suffix + '.hpp')
    return os.path.normpath(path)

def get_include_path(data: dict[str, Any], suffix: str = ''):
    package_name : str = data['__metadata__']['package'].lstrip('*')
    module_name : str = data['__metadata__']['module']
    namespace_path : list[str] = data['__metadata__']['namespace']
    path = os.path.join(package_name, *namespace_path, module_name + suffix + '.hpp')
    return os.path.normpath(path)

def get_source_path(root_path: str, data: dict[str, Any], suffix: str = ''):
    package_name : str = data['__metadata__']['package'].lstrip('*')
    module_name : str = data['__metadata__']['module']
    namespace_path : list[str] = data['__metadata__']['namespace']
    path = os.path.join(root_path, package_name, 'src', *namespace_path, module_name + suffix + '.cpp')
    return os.path.normpath(path)

def generate_cpp(root_path: str, data: dict[str, Any], ctx: dict[str, dict[str, Any]]) -> None:

    dyn_hdr_path : str = generate_dynamic_header_file(root_path, data, ctx)
    dyn_src_path : str = generate_dynamic_source_file(root_path, data, ctx)

    print(dyn_hdr_path)
    print(dyn_src_path)




def generate_dynamic_header_file(root_path: str, data: dict[str, Any], ctx: dict[str, dict[str, Any]]) -> str:
    path : str = get_header_path(root_path, data)
    
    ls : list[str] = []
    i = 0

    add_block_comment(ls, i,'', 'Header file auto-generated by VORTEX SETTINGS WIZARD', '', 'TODO: Just testing', '')
    add_blank(ls)

    _create_file(path, ls)

    return path

def generate_dynamic_source_file(root_path: str, data: dict[str, Any], ctx: dict[str, dict[str, Any]]) -> str:
    path : str = get_source_path(root_path, data)

    ls : list[str] = []
    i = 0

    add_block_comment(ls, i,'', 'Header file auto-generated by VORTEX SETTINGS WIZARD', '', 'TODO: Just testing', '')
    add_blank(ls)
    add_include(ls, i, get_include_path(data))
    add_blank(ls)

    _create_file(path, ls)

    return path
